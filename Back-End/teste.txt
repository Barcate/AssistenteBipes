import express from "express";
import multer from "multer";
import OpenAI from "openai";
import dotenv from 'dotenv';
import cors from 'cors';
import path from 'path';

dotenv.config();

const app = express();
const upload = multer({ storage: multer.memoryStorage() });

app.use(express.json());
// app.use(express.static(path.join(__dirname, 'build'))); // Se você ainda precisa servir arquivos estáticos

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// Configuração CORS específica para aceitar requisições de localhost:3000
app.use(cors({
  origin: 'http://localhost:3000',
  methods: ['GET', 'POST'],  // Métodos que você deseja permitir
  allowedHeaders: ['Content-Type', 'Authorization']
}));

async function convertTextToSpeech(text) {
  try {
    const response = await openai.audio.speech.create({
      model: "tts-1",
      voice: "alloy",
      input: text,
    });
    return Buffer.from(await response.arrayBuffer());
  } catch (error) {
    console.error("Erro na conversão de texto para áudio:", error);
    throw error;
  }
}

async function convertAudioToText(audioBuffer) {
  try {
    const response = await openai.audio.transcriptions.create({
      buffer: audioBuffer,
      model: "whisper-1",
    });
    if (!response.text) throw new Error("Failed to convert audio to text.");
    return response.text.trim(); // Certifique-se de limpar e verificar o texto
  } catch (error) {
    console.error("Erro na conversão de áudio para texto:", error);
    throw error;
  }
}

app.post('/message', upload.single('audio'), async (req, res) => {
  try {
    let textToProcess = req.body.messageContent || (req.file && await convertAudioToText(req.file.buffer));

    if (!textToProcess) {
      return res.status(400).send("No text or audio message received");
    }

    const completion = await openai.chat.completions.create({
      messages: [{ role: "system", content: "You are the HexaCodeAssistant" }, { role: "user", content: textToProcess }],
      model: "ft:gpt-3.5-turbo-0125:pete::9EgX74fq",
    });

    const responseText = completion.choices[0].message.content;
    const audioResponse = await convertTextToSpeech(responseText);

    res.set('Content-Type', 'audio/mpeg');
    res.send(audioResponse);
  } catch (error) {
    console.error("Error calling AI:", error);
    res.status(500).send(error.message);
  }
});

// // Rota para servir o index.html do React, se necessário
// app.get('*', (req, res) => {
//   res.sendFile(path.join(__dirname, 'build', 'index.html'));
// });

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
